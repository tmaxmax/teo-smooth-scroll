@import url('https://fonts.googleapis.com/css2?family=Noto+Serif:ital,wght@0,400;0,700;1,400;1,700&display=swap');
$Noto: 'Noto Serif', serif;

* {
  box-sizing: inherit;
  font-family: inherit;
  margin: 0;
  padding: 0;
}

.no-scroll-bar {
  &::-webkit-scrollbar {
    display: none;
  }

  -ms-overflow-style: none;
}

$font-base-size: 16;

body,
html {
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  overflow: hidden;
  position: fixed;
  font-family: $Noto;
  font-size: #{$font-base-size}px;
  -webkit-overflow-scrolling: touch;
}

$section-colors: (#ebd680, #d9a328, #64a4cd, #af4735, #06a3d8);

nav.section-links {
  position: fixed;
  top: 50%;
  right: 0;
  transform: translateY(-50%);
  z-index: 1;
  margin-right: calc(1.4em + env(safe-area-inset-right));

  a {
    display: block;
    position: relative;
    padding: 0.2em;
    margin-bottom: 0.1em;
    text-decoration: none;
    border-radius: 0.5em;

    &::after {
      content: '';
      display: inline-block;
      background-color: black;
      border-radius: 100%;
      width: 1em;
      height: 1em;
      transform: scale(0.5);
      transition: transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1);
    }

    &.active {
      &::after {
        transform: scale(1);
      }
    }
  }
}

section.main {
  &.huge {
    padding: calc(env(safe-area-inset-top)) calc(3.2em + env(safe-area-inset-right))
      calc(env(safe-area-inset-bottom)) calc(env(safe-area-inset-left));
    height: 100%;
    width: 100%;
    overflow: hidden;
  }

  &.random-colored {
    @for $text-type from 1 through length($section-colors) {
      &:nth-of-type(#{length($section-colors)}n + #{$text-type}) {
        background-color: nth($section-colors, $text-type);

        .container {
          .content {
            &:focus {
              outline: none;
              box-shadow: 3px 3px 10px 0px darken(nth($section-colors, $text-type), 10%) inset,
                -3px -3px 10px 0px lighten(nth($section-colors, $text-type), 8%) inset;
            }
          }
        }
      }
    }
  }

  .container {
    width: 100%;
    height: 100%;
    background-color: inherit;
    padding: 1em;
    overflow: auto;

    .content {
      padding: 1em;
      border-radius: 1em;
      transition: box-shadow 0.5s cubic-bezier(0.25, 0.1, 0.25, 1);
      overflow: auto;
      text-overflow: ellipsis;

      &::after {
        content: '';
        display: block;
      }

      &.self-flex-center-vertical {
        height: fit-content;
        align-self: center;
      }
    }

    &.flex {
      display: flex;
    }

    $content-max-width: 500;

    &.grid {
      display: grid;
      gap: 0 1em;
      grid-template-rows: max-content max-content max-content;

      $grid-columns: (#{$content-max-width}px);
      @for $text-type from 1 through 2 {
        $grid-columns-auto: ();

        @for $j from 1 through $text-type + 1 {
          $grid-columns-auto: append($grid-columns-auto, calc(#{100% / ($text-type + 1)} - #{$font-base-size * $text-type / ($text-type + 1)}px));
        }
        $grid-columns: append($grid-columns, #{$content-max-width}px);

        @media screen and (min-width: #{83 + $content-max-width * $text-type + $content-max-width * 3 / 5 + $text-type * $font-base-size}px) {
          grid-template-columns: #{$grid-columns-auto};
        }

        @media screen and (min-width: #{83 + $content-max-width * ($text-type + 1) + $text-type * $font-base-size}px) {
          grid-template-columns: #{$grid-columns};
        }
      }

      .content {
        max-width: #{$content-max-width}px;
      }
    }
  }
}

$font-min-scale-screen-width: 320;
$font-max-scale-screen-width: 1600;

@function typographic($min, $max, $scale-min: $font-min-scale-screen-width, $scale-max: $font-max-scale-screen-width) {
  @return calc(
    #{$min}em + (#{$max} - #{$min}) * #{$font-base-size} * ((100vw - #{$scale-min}px) /
          (#{$scale-max} - #{$scale-min}))
  );
}

html,
body {
  font-size: #{$font-base-size}px;
}
/*
 * TEXT TYPES
 *
 * Helper functions:
 *  - text-type-tag($text-type) => HTML Tag from the array
 *  - min-font($text-type) => minimum font size from the array
 *  - max-font($text-type) => maximum font size from the array
 *  - properties($text-type) => properties map from the array
 */
$text-types:(
  (
    'tag': h1,
    'font-sizes': (
      'min': 3,
      'max': 6
    ), 
    'properties': (
      'font-weight': bold,
      'line-height': 0.9em
    )
  ),
  (
    'tag': h2,
    'font-sizes': (
      'min': 2,
      'max': 4
    ), 
    'properties': (
      'font-weight': normal
    )
  ),
  (
    'tag': p,
    'font-sizes': (
      'min': 1, 
      'max': 1.2
    ), 
    'properties': (
      'line-height': 1.6em
    )
  )
);
@function text-type-tag($text-type) {
  @return map-get($map: $text-type, $key: 'tag');
}
@function min-font($text-type) {
  $font-sizes: map-get($map: $text-type, $key: 'font-sizes');
  @if $font-sizes {
    $min: map-get($map: $font-sizes, $key: 'min');
    @if $min {
      @return $min;
    } @else {
      @return $font-base-size;
    }
  }
}
@function max-font($text-type) {
  $font-sizes: map-get($map: $text-type, $key: 'font-sizes');
  @if $font-sizes {
    $max: map-get($map: $font-sizes, $key: 'max');
    @if $max {
      @return $max;
    } @else if min-font($text-type) {
      @return min-font($text-type);
    } @else {
      @return $font-base-size;
    }
  }
}
@function properties($text-type) {
  @return map-get($map: $text-type, $key: 'properties');
}

@each $text-type in $text-types {
  #{text-type-tag($text-type)} {
    font-size: typographic(min-font($text-type), max-font($text-type));
    @each $property, $value in properties($text-type) {
      #{$property}: $value;
    }
  }
}

@media screen and (max-width: $font-min-scale-screen-width) {
  @each $text-type in $text-types {
    #{text-type-tag($text-type)} {
      font-size: min-font($text-type);
    }
  }
}

@media screen and (min-width: $font-max-scale-screen-width) {
  @each $text-type in $text-types {
    #{text-type-tag($text-type)} {
      font-size: max-font($text-type);
    }
  }
}
